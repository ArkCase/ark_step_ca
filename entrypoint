#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

join_array() {
	local IFS="${1}"
	shift
	echo "$*"
}

validate_ip() {
	[ ${#} -ge 1 ] || return 1
	local PARTS=()
	for IP in "${@}" ; do
		IFS="." PARTS=(${IP})
		# Is it made of 4 parts separated by dots?
		[ ${#PARTS[@]} -eq 4 ] || return 1
		for p in "${PARTS[@]}" ; do
			# Is it a 1-3 digit number?
			[[ "${p}" =~ ^[0-9]{1,3}$ ]] || return 1
			# Don't allow leading zeros
			[[ "${p}" =~ ^0[0-9]{1,2}$ ]] && return 1
			# Is it in [0..255]?
			[ ${p} -ge 0 ] || return 1
			[ ${p} -le 255 ] || return 1
		done
		echo "${IP}"
	done
	return 0
}

set -eo pipefail

# Paraphrased from:
# https://github.com/influxdata/influxdata-docker/blob/0d341f18067c4652dfa8df7dcb24d69bf707363d/influxdb/2.0/entrypoint.sh
# (a repo with no LICENSE.md)

export STEPPATH="$(step path)"
export CONFIGPATH="${STEPPATH}/config/ca.json"
export PWDPATH="${STEPPATH}/secrets/password"

if [ -f "${PWDPATH}" ] ; then
	# Make sure our existing password exactly matches our
	# incoming password. If they don't, then we must nuke
	# the existing configurations so we can create new ones
	# using this new password. Or, perhaps, change the existing
	# certificate's password?
	read OLD_PASSWORD REST < <(/usr/bin/sha256sum "${PWDPATH}")

	if [ -v DOCKER_STEPCA_INIT_PASSWORD_FILE ] ; then
		read NEW_PASSWORD REST < <(/usr/bin/sha256sum "${DOCKER_STEPCA_INIT_PASSWORD_FILE}")
	elif [ -v DOCKER_STEPCA_INIT_PASSWORD ]; then
		read NEW_PASSWORD REST < <(echo -n "${DOCKER_STEPCA_INIT_PASSWORD}" | /usr/bin/sha256sum)
	fi

	if [ "${NEW_PASSWORD:-""}" != "${OLD_PASSWORD}" ] ; then
		echo "‚ö†Ô∏è The incoming password and the existing password don't match, the configuration must be re-initialized"
		/usr/bin/find "${STEPPATH}" -delete &>/dev/null || true
		FILES="$(/usr/bin/find "${STEPPATH}" -type f | /usr/bin/wc -l)"
		if [ "${FILES}" -gt 0 ] ; then
			>&2 echo "‚ùå Failed to clear out the existing data at [${STEPPATH}] ... please remove it manually."
			exit 1
		fi
	fi
fi

# List of env vars required for step ca init
declare -ra REQUIRED_INIT_VARS=(DOCKER_STEPCA_INIT_NAME DOCKER_STEPCA_INIT_DNS_NAMES)

if [ ! -v DOCKER_STEPCA_INIT_DNS_NAMES ] || [ "${DOCKER_STEPCA_INIT_DNS_NAMES,,}" == "<auto>" ] ; then

	# Unset this in case we were explicitly told to autocompute them
	[ -v DOCKER_STEPCA_INIT_DNS_NAMES ] && unset DOCKER_STEPCA_INIT_DNS_NAMES

	# We weren't given names, so compute them
	if [ -v KUBERNETES_SERVICE_HOST ] ; then

		# We're in K8s, so proceed accordingly
		FQDN="$(/usr/bin/hostname -f)"
		IFS="." read POD SERVICE NAMESPACE SVC CLUSTER_DOMAIN <<< "${FQDN}"

		NAMES=()

		# DOCKER_STEPCA_INIT_SERVICE_NAME is the "consumable" service,
		# while SERVICE is the (possibly headless) default service
		# associated to a pod. They *may* be the same but aren't
		# required to be. Thus, we check to see if they're the same,
		# to avoid adding duplicate values
		[ -v DOCKER_STEPCA_INIT_SERVICE_NAME ] || DOCKER_STEPCA_INIT_SERVICE_NAME="${SERVICE}"
		if [ "${DOCKER_STEPCA_INIT_SERVICE_NAME}" != "${SERVICE}" ] ; then
			if [ -n "${NAMESPACE}" ] ; then
				if [ -n "${CLUSTER_DOMAIN}" ] ; then
					[ -n "${FQSN}" ] || FQSN="${DOCKER_STEPCA_INIT_SERVICE_NAME}.${NAMESPACE}.svc.${CLUSTER_DOMAIN}"
					NAMES+=("${FQSN}")
				fi
				NAMES+=("${DOCKER_STEPCA_INIT_SERVICE_NAME}.${NAMESPACE}")
			fi
			NAMES+=("${DOCKER_STEPCA_INIT_SERVICE_NAME}")
			SVC_VAR="${DOCKER_STEPCA_INIT_SERVICE_NAME^^}_SERVICE_HOST"
			if [ -v "${SVC_VAR}" ] ; then
				SVC_IP="$(validate_ip "${!SVC_VAR}")" && [ "${SVC_IP}" != "127.0.01" ] && NAMES+=("${SVC_IP}")
			fi
		fi

		if [ -n "${SERVICE}" ] ; then
			if [ -n "${NAMESPACE}" ] ; then
				if [ -n "${CLUSTER_DOMAIN}" ] ; then
					[ -n "${FQSN}" ] || FQSN="${SERVICE}.${NAMESPACE}.svc.${CLUSTER_DOMAIN}"
					NAMES+=(
						"${POD}.${SERVICE}.${NAMESPACE}.svc.${CLUSTER_DOMAIN}"
						"${SERVICE}.${NAMESPACE}.svc.${CLUSTER_DOMAIN}"
					)
				fi
				NAMES+=(
					"${POD}.${SERVICE}.${NAMESPACE}"
					"${SERVICE}.${NAMESPACE}"
				)
			fi
			NAMES+=(
				"${POD}.${SERVICE}"
				"${SERVICE}"
			)
			SVC_VAR="${SERVICE^^}_SERVICE_HOST"
			if [ -v "${SVC_VAR}" ] ; then
				SVC_IP="$(validate_ip "${!SVC_VAR}")" && [ "${SVC_IP}" != "127.0.01" ] && NAMES+=("${SVC_IP}")
			fi
		fi

		NAMES+=(
			"${POD}"
			"localhost.localdomain"
			"localhost"
		)

		if [ -v POD_IP ] ; then
			POD_IP="$(validate_ip "${PID_IP}")" && [ "${POD_IP}" != "127.0.01" ] && NAMES+=("${POD_IP}")
		fi
		NAMES+=("127.0.0.1")

		DOCKER_STEPCA_INIT_DNS_NAMES="$(join_array "," "${NAMES[@]}")"
		[ -n "${DOCKER_STEPCA_INIT_DNS_NAMES}" ] || unset DOCKER_STEPCA_INIT_DNS_NAMES
	else
		FQDN="$(hostname -f)"
		HN="$(hostname -s)"
		[ "${HN}" == "${FQDN}" ] || FQDN="${FQDN},${HN}"
		DOCKER_STEPCA_INIT_DNS_NAMES="localhost,localhost.localdomain,${FQDN}"
	fi

	if [ -n "${DOCKER_STEPCA_INIT_DNS_NAMES}" ] ; then
		echo "üëâ Computed DOCKER_STEPCA_INIT_DNS_NAMES=[${DOCKER_STEPCA_INIT_DNS_NAMES}]"
	else
		unset DOCKER_STEPCA_INIT_DNS_NAMES
	fi
fi

# Ensure all env vars required to run step ca init are set.
function init_if_possible () {

	local FAILED=()
	for VAR in "${REQUIRED_INIT_VARS[@]}"; do
		[ -v "${VAR}" ] || FAILED+=("${VAR}")
	done

	if [ ${#FAILED[@]} -gt 0 ] ; then
		>&2 echo "‚ùå There is no config file at [${CONFIGPATH}]; please run step ca init, or provide values for these variables: ${FAILED[@]}"
		return 1
	fi

	# Everything is available for initialization
	step_ca_init "${@}"
}

# Initialize a CA if not already initialized
function step_ca_init () {
	DOCKER_STEPCA_INIT_PROVISIONER_NAME="${DOCKER_STEPCA_INIT_PROVISIONER_NAME:-admin}"
	DOCKER_STEPCA_INIT_ADMIN_SUBJECT="${DOCKER_STEPCA_INIT_ADMIN_SUBJECT:-step}"
	DOCKER_STEPCA_INIT_ADDRESS="${DOCKER_STEPCA_INIT_ADDRESS:-:9000}"

	local -a SETUP_ARGS=(
		--name "${DOCKER_STEPCA_INIT_NAME}"
		--dns "${DOCKER_STEPCA_INIT_DNS_NAMES}"
		--provisioner "${DOCKER_STEPCA_INIT_PROVISIONER_NAME}"
		--password-file "${STEPPATH}/password"
		--provisioner-password-file "${STEPPATH}/provisioner_password"
		--address "${DOCKER_STEPCA_INIT_ADDRESS}"
	)
	if [ -v DOCKER_STEPCA_INIT_PASSWORD_FILE ] ; then
		if [ ! -s "${DOCKER_STEPCA_INIT_PASSWORD_FILE}" ] ; then
			>&2 echo "‚ùå The password file at [${DOCKER_STEPCA_INIT_PASSWORD_FILE}] may not be empty."
			return 1
		fi
		cat "${DOCKER_STEPCA_INIT_PASSWORD_FILE}" | tee "${STEPPATH}/password" > "${STEPPATH}/provisioner_password"
	elif [ -v DOCKER_STEPCA_INIT_PASSWORD ]; then
		if [ -z "${DOCKER_STEPCA_INIT_PASSWORD}" ]; then
			>&2 echo "‚ùå The password from [${DOCKER_STEPCA_INIT_PASSWORD}] may not be empty."
			return 1
		fi
		echo -n "${DOCKER_STEPCA_INIT_PASSWORD}" | tee "${STEPPATH}/password" > "${STEPPATH}/provisioner_password"
	else
		>&2 echo "‚ùå Must provide a pre-set password using either DOCKER_STEPCA_INIT_PASSWORD or DOCKER_STEPCA_INIT_PASSWORD_FILE"
		return 1
	fi
	if [ "${DOCKER_STEPCA_INIT_SSH}" == "true" ]; then
		SETUP_ARGS+=(--ssh)
	fi
	if [ "${DOCKER_STEPCA_INIT_ACME}" == "true" ]; then
		SETUP_ARGS+=(--acme)
	fi
	if [ "${DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT}" == "true" ]; then
		SETUP_ARGS+=(--remote-management)
		SETUP_ARGS+=(--admin-subject "${DOCKER_STEPCA_INIT_ADMIN_SUBJECT}")
	fi
	step ca init "${SETUP_ARGS[@]}"

	NOT_BEFORE="$(date -Isec -u)"
	NOT_AFTER="$(date -d "5 years" -Isec -u)"

	echo "üëâ Creating a stronger root CA..."
	# TODO: Get the CN from the original CA to substitute here?
	OUT="$(
		step certificate create \
			--profile root-ca \
			--kty RSA \
			--size 4096 \
			--force \
			--not-before="${NOT_BEFORE}" \
			--not-after="${NOT_AFTER}" \
			--password-file "${STEPPATH}/password" \
			"${DOCKER_STEPCA_INIT_NAME} Root CA" \
			"${STEPPATH}/certs/root_ca.crt" "${STEPPATH}/secrets/root_ca_key"
	)"
	RC=${?}
	if [ ${RC} -ne 0 ] ; then
		echo "‚ùå Failed to generate the stronger root CA (rc=${?})"
		echo "${OUT}"
		exit 1
	fi

	echo "üëâ Creating a stronger intermediate CA..."
	# TODO: Get the CN from the original Intermediate CA to substitute here?
	OUT="$(
   		step certificate create \
			--profile intermediate-ca \
			--kty RSA \
			--size 4096 \
			--force \
			--not-before="${NOT_BEFORE}" \
			--not-after="${NOT_AFTER}" \
			--password-file "${STEPPATH}/password" \
			--ca "${STEPPATH}/certs/root_ca.crt" \
			--ca-key "${STEPPATH}/secrets/root_ca_key" \
			--ca-password-file "${STEPPATH}/password" \
			"${DOCKER_STEPCA_INIT_NAME} Intermediate CA" \
			"${STEPPATH}/certs/intermediate_ca.crt" "${STEPPATH}/secrets/intermediate_ca_key"
	)"
	RC=${?}
	if [ ${RC} -ne 0 ] ; then
		echo "‚ùå Failed to generate the stronger intermediate CA (rc=${?})"
		echo "${OUT}"
		exit 1
	fi

	echo ""
	if [ "${DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT}" == "true" ]; then
		echo "üëâ Your CA administrative username is: ${DOCKER_STEPCA_INIT_ADMIN_SUBJECT}"
	fi
	echo "üëâ Your CA administrative password is: $(< "${STEPPATH}/provisioner_password" )"
	echo "ü§´ This will only be displayed once."
	shred -u "${STEPPATH}/provisioner_password"
	mv "${STEPPATH}/password" "${PWDPATH}"
}

[ -f /usr/sbin/pcscd ] && /usr/sbin/pcscd

if [ ! -f "${CONFIGPATH}" ] ; then
	init_if_possible

	# Start the reconfiguration script
	"${BASEDIR}/reconfigure" $$ & disown
fi

# Launch the daemon
exec /usr/bin/step-ca --password-file "${PWDPATH}" "${CONFIGPATH}"
