#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -eo pipefail

# Paraphrased from:
# https://github.com/influxdata/influxdata-docker/blob/0d341f18067c4652dfa8df7dcb24d69bf707363d/influxdb/2.0/entrypoint.sh
# (a repo with no LICENSE.md)

export STEPPATH="$(step path)"
export CONFIGPATH="${STEPPATH}/config/ca.json"
export PWDPATH="${STEPPATH}/secrets/password"

# List of env vars required for step ca init
declare -ra REQUIRED_INIT_VARS=(DOCKER_STEPCA_INIT_NAME DOCKER_STEPCA_INIT_DNS_NAMES)

if [ ! -v DOCKER_STEPCA_INIT_DNS_NAMES ] || [ "${DOCKER_STEPCA_INIT_DNS_NAMES,,}" == "<auto>" ] ; then

	# Unset this in case we were explicitly told to autocompute them
	[ -v DOCKER_STEPCA_INIT_DNS_NAMES ] && unset DOCKER_STEPCA_INIT_DNS_NAMES

	# We weren't given names, so compute them
	if [ -v KUBERNETES_SERVICE_HOST ] ; then
		# We're in K8s, so proceed accordingly
		FQDN="$(/usr/bin/hostname -f)"
		IFS="." read POD SERVICE NAMESPACE SVC CLUSTER_DOMAIN <<< "${FQDN}"

		[ -v SERVICE_NAME ] || SERVICE_NAME="${SERVICE}"

		NAMES=("localhost" "localhost.localdomain")
		while read SVC ; do
			[ -n "${NAMESPACE}" ] && [ -n "${CLUSTER_DOMAIN}" ] && NAMES+=("${SVC}.${NAMESPACE}.svc.${CLUSTER_DOMAIN}")
			[ -n "${NAMESPACE}" ] && NAMES+=("${SVC}.${NAMESPACE}")
			NAMES+=("${SVC}")
		done < <(echo -e "${SERVICE}\n${SERVICE_NAME}" | sort -u | sed -e '/^\s*$/d')

		[ ${#NAMES[@]} -gt 2 ] || NAMES+=("$(hostname -s)")

		DOCKER_STEPCA_INIT_DNS_NAMES=""
		for N in "${NAMES[@]}" ; do
			[ -n "${DOCKER_STEPCA_INIT_DNS_NAMES}" ] && DOCKER_STEPCA_INIT_DNS_NAMES+=","
			DOCKER_STEPCA_INIT_DNS_NAMES+="${N}"
		done
		[ -n "${DOCKER_STEPCA_INIT_DNS_NAMES}" ] || unset DOCKER_STEPCA_INIT_DNS_NAMES
	else
		FQDN="$(hostname -f)"
		HN="$(hostname -s)"
		[ "${HN}" == "${FQDN}" ] || FQDN="${FQDN},${HN}"
		DOCKER_STEPCA_INIT_DNS_NAMES="localhost,localhost.localdomain,${FQDN}"
	fi

	if [ -n "${DOCKER_STEPCA_INIT_DNS_NAMES}" ] ; then
		echo "üëâ Computed DOCKER_STEPCA_INIT_DNS_NAMES=[${DOCKER_STEPCA_INIT_DNS_NAMES}]"
	else
		unset DOCKER_STEPCA_INIT_DNS_NAMES
	fi
fi

# Ensure all env vars required to run step ca init are set.
function init_if_possible () {

	local FAILED=()
	for VAR in "${REQUIRED_INIT_VARS[@]}"; do
		[ -v "${VAR}" ] || FAILED+=("${VAR}")
	done

	if [ ${#FAILED[@]} -gt 0 ] ; then
		>&2 echo "‚ùå There is no config file at [${CONFIGPATH}]; please run step ca init, or provide values for these variables: ${FAILED[@]}"
		return 1
	fi

	# Everything is available for initialization
	step_ca_init "${@}"
}

function generate_password () {
	set +o pipefail
	< /dev/urandom tr -dc A-Za-z0-9 | head -c40
	echo
	set -o pipefail
}

# Initialize a CA if not already initialized
function step_ca_init () {
	DOCKER_STEPCA_INIT_PROVISIONER_NAME="${DOCKER_STEPCA_INIT_PROVISIONER_NAME:-admin}"
	DOCKER_STEPCA_INIT_ADMIN_SUBJECT="${DOCKER_STEPCA_INIT_ADMIN_SUBJECT:-step}"
	DOCKER_STEPCA_INIT_ADDRESS="${DOCKER_STEPCA_INIT_ADDRESS:-:9000}"

	local -a SETUP_ARGS=(
		--name "${DOCKER_STEPCA_INIT_NAME}"
		--dns "${DOCKER_STEPCA_INIT_DNS_NAMES}"
		--provisioner "${DOCKER_STEPCA_INIT_PROVISIONER_NAME}"
		--password-file "${STEPPATH}/password"
		--provisioner-password-file "${STEPPATH}/provisioner_password"
		--address "${DOCKER_STEPCA_INIT_ADDRESS}"
	)
	if [ -n "${DOCKER_STEPCA_INIT_PASSWORD}" ]; then
		echo "${DOCKER_STEPCA_INIT_PASSWORD}" > "${STEPPATH}/password"
		echo "${DOCKER_STEPCA_INIT_PASSWORD}" > "${STEPPATH}/provisioner_password"
	else
		generate_password > "${STEPPATH}/password"
		generate_password > "${STEPPATH}/provisioner_password"
	fi
	if [ "${DOCKER_STEPCA_INIT_SSH}" == "true" ]; then
		SETUP_ARGS+=(--ssh)
	fi
	if [ "${DOCKER_STEPCA_INIT_ACME}" == "true" ]; then
		SETUP_ARGS+=(--acme)
	fi
	if [ "${DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT}" == "true" ]; then
		SETUP_ARGS+=(--remote-management)
		SETUP_ARGS+=(--admin-subject "${DOCKER_STEPCA_INIT_ADMIN_SUBJECT}")
	fi
	step ca init "${SETUP_ARGS[@]}"

	NOT_BEFORE="$(date -Isec -u)"
	NOT_AFTER="$(date -d "5 years" -Isec -u)"

	echo "üëâ Creating a stronger root CA..."
	# TODO: Get the CN from the original CA to substitute here?
	OUT="$(
		step certificate create \
			--profile root-ca \
			--kty RSA \
			--size 4096 \
			--force \
			--not-before="${NOT_BEFORE}" \
			--not-after="${NOT_AFTER}" \
			--password-file "${STEPPATH}/password" \
			"${DOCKER_STEPCA_INIT_NAME} Root CA" \
			"${STEPPATH}/certs/root_ca.crt" "${STEPPATH}/secrets/root_ca_key"
	)"
	RC=${?}
	if [ ${RC} -ne 0 ] ; then
		echo "‚ùå Failed to generate the stronger root CA (rc=${?})"
		echo "${OUT}"
		exit 1
	fi

	echo "üëâ Creating a stronger intermediate CA..."
	# TODO: Get the CN from the original Intermediate CA to substitute here?
	OUT="$(
   		step certificate create \
			--profile intermediate-ca \
			--kty RSA \
			--size 4096 \
			--force \
			--not-before="${NOT_BEFORE}" \
			--not-after="${NOT_AFTER}" \
			--password-file "${STEPPATH}/password" \
			--ca "${STEPPATH}/certs/root_ca.crt" \
			--ca-key "${STEPPATH}/secrets/root_ca_key" \
			--ca-password-file "${STEPPATH}/password" \
			"${DOCKER_STEPCA_INIT_NAME} Intermediate CA" \
			"${STEPPATH}/certs/intermediate_ca.crt" "${STEPPATH}/secrets/intermediate_ca_key"
	)"
	RC=${?}
	if [ ${RC} -ne 0 ] ; then
		echo "‚ùå Failed to generate the stronger intermediate CA (rc=${?})"
		echo "${OUT}"
		exit 1
	fi

	echo ""
	if [ "${DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT}" == "true" ]; then
		echo "üëâ Your CA administrative username is: ${DOCKER_STEPCA_INIT_ADMIN_SUBJECT}"
	fi
	echo "üëâ Your CA administrative password is: $(< "${STEPPATH}/provisioner_password" )"
	echo "ü§´ This will only be displayed once."
	shred -u "${STEPPATH}/provisioner_password"
	mv "${STEPPATH}/password" "${PWDPATH}"
}

[ -f /usr/sbin/pcscd ] && /usr/sbin/pcscd

if [ ! -f "${CONFIGPATH}" ] ; then
	init_if_possible

	# Start the reconfiguration script
	"${BASEDIR}/reconfigure" $$ & disown
fi

# Launch the daemon
exec /usr/local/bin/step-ca --password-file "${PWDPATH}" "${CONFIGPATH}"
